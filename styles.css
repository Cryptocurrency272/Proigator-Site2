document.addEventListener("DOMContentLoaded", async () => { const connectButton = document.getElementById("connectBtn"); const referralInput = document.getElementById("referralInput"); const generateBtn = document.getElementById("generateBtn"); const copyBtn = document.getElementById("copyBtn"); const referralLinkDisplay = document.getElementById("referralLink"); const buyButton = document.getElementById("buyBtn"); const amountInput = document.getElementById("amountInput");

const userBalanceEl = document.getElementById("userBalance"); const claimableEl = document.getElementById("claimableTokens"); const totalSupplyEl = document.getElementById("totalSupply");

const providerOptions = { walletconnect: { package: window.WalletConnectProvider.default, options: { rpc: { 56: "https://bsc-dataseed.binance.org/" }, chainId: 56 } } };

const web3Modal = new window.Web3Modal.default({ cacheProvider: false, providerOptions });

let web3; let selectedAccount; const CONTRACT_ADDRESS = "0xF4c4fA2E899B98489f399Cb521B28220076E1F88"; const ABI = [ // ERC20 Functions { "constant": true, "inputs": [], "name": "name", "outputs": [{ "name": "", "type": "string" }], "type": "function" }, { "constant": true, "inputs": [], "name": "symbol", "outputs": [{ "name": "", "type": "string" }], "type": "function" }, { "constant": true, "inputs": [], "name": "decimals", "outputs": [{ "name": "", "type": "uint8" }], "type": "function" }, { "constant": true, "inputs": [], "name": "totalSupply", "outputs": [{ "name": "", "type": "uint256" }], "type": "function" }, { "constant": true, "inputs": [{ "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "name": "", "type": "uint256" }], "type": "function" },

// Vesting
{ "constant": true, "inputs": [{ "name": "account", "type": "address" }], "name": "claimable", "outputs": [{ "name": "", "type": "uint256" }], "type": "function" },
{ "constant": false, "inputs": [], "name": "claim", "outputs": [], "type": "function" }

];

let contract;

connectButton.addEventListener("click", async () => { try { const providerInstance = await web3Modal.connect(); web3 = new Web3(providerInstance); const accounts = await web3.eth.getAccounts(); selectedAccount = accounts[0]; contract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS);

connectButton.innerText = selectedAccount.slice(0, 6) + "..." + selectedAccount.slice(-4);

  updateBalance();
} catch (error) {
  console.error("Connection failed:", error);
}

});

async function updateBalance() { if (!contract || !selectedAccount) return; try { const balance = await contract.methods.balanceOf(selectedAccount).call(); const claimable = await contract.methods.claimable(selectedAccount).call(); const supply = await contract.methods.totalSupply().call();

const decimals = await contract.methods.decimals().call();

  const format = (num) => parseFloat(web3.utils.fromWei(num, "ether")).toLocaleString();

  userBalanceEl.innerText = format(balance) + " $ORIF";
  claimableEl.innerText = format(claimable);
  totalSupplyEl.innerText = format(supply) + " $ORIF";
} catch (err) {
  console.warn("Using fallback supply", err);
  userBalanceEl.innerText = "-- $ORIF";
  claimableEl.innerText = "--";
  totalSupplyEl.innerText = "60,000,000 $ORIF";
}

}

generateBtn.addEventListener("click", () => { const addr = referralInput.value.trim(); if (web3.utils.isAddress(addr)) { const url = ${window.location.origin}?ref=${addr}; referralLinkDisplay.value = url; } else { referralLinkDisplay.value = "Invalid address"; } });

copyBtn.addEventListener("click", () => { referralLinkDisplay.select(); document.execCommand("copy"); copyBtn.innerText = "Copied!"; setTimeout(() => copyBtn.innerText = "Copy Referral Link", 2000); });

buyButton.addEventListener("click", async () => { const amountBNB = amountInput.value.trim(); if (!selectedAccount || !amountBNB || isNaN(amountBNB)) return;

const refAddress = new URLSearchParams(window.location.search).get("ref") || "0x0000000000000000000000000000000000000000";
const encodedData = web3.eth.abi.encodeParameters(['address'], [refAddress]);

try {
  await web3.eth.sendTransaction({
    from: selectedAccount,
    to: CONTRACT_ADDRESS,
    value: web3.utils.toWei(amountBNB, "ether"),
    data: encodedData
  });
} catch (err) {
  console.error("Buy failed:", err);
}

}); });

                                                                                 
